type User {
  id: ID!
  firstName: String!
  lastName: String!
  nationalID: String!
  email: String!
  number: String!
  reports(filter: ModelProblemFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProblemConnection
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Problem {
  id: ID!
  title: String!
  description: String
  userID: ID!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  nationalID: ModelStringInput
  email: ModelStringInput
  number: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  syncProblems(filter: ModelProblemFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelProblemConnection
  getProblem(id: ID!): Problem
  listProblems(filter: ModelProblemFilterInput, limit: Int, nextToken: String): ModelProblemConnection
}

input CreateUserInput {
  id: ID
  firstName: String!
  lastName: String!
  nationalID: String!
  email: String!
  number: String!
  _version: Int
}

input UpdateUserInput {
  id: ID!
  firstName: String
  lastName: String
  nationalID: String
  email: String
  number: String
  _version: Int
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createProblem(input: CreateProblemInput!, condition: ModelProblemConditionInput): Problem
  updateProblem(input: UpdateProblemInput!, condition: ModelProblemConditionInput): Problem
  deleteProblem(input: DeleteProblemInput!, condition: ModelProblemConditionInput): Problem
}

input ModelUserConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  nationalID: ModelStringInput
  email: ModelStringInput
  number: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateProblem: Problem @aws_subscribe(mutations: ["createProblem"])
  onUpdateProblem: Problem @aws_subscribe(mutations: ["updateProblem"])
  onDeleteProblem: Problem @aws_subscribe(mutations: ["deleteProblem"])
}

type ModelProblemConnection {
  items: [Problem]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelProblemFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  userID: ModelIDInput
  and: [ModelProblemFilterInput]
  or: [ModelProblemFilterInput]
  not: ModelProblemFilterInput
}

input CreateProblemInput {
  id: ID
  title: String!
  description: String
  userID: ID!
  _version: Int
}

input UpdateProblemInput {
  id: ID!
  title: String
  description: String
  userID: ID
  _version: Int
}

input DeleteProblemInput {
  id: ID!
  _version: Int
}

input ModelProblemConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  userID: ModelIDInput
  and: [ModelProblemConditionInput]
  or: [ModelProblemConditionInput]
  not: ModelProblemConditionInput
}
