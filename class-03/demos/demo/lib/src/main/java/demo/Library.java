/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class Library {

    /**
     * allow duplicates
     * and are indexed
     *
     * @return
     */
    public List<String> listDemo() {
        List<String> planets = new ArrayList<>();

        planets.add("Pluto");
        planets.add("Pluto");
        planets.add("Mars");
        planets.add("Earth");
        planets.add("Jupiter");

        LinkedList<String> groceries = new LinkedList<>();

        groceries.add("Humus");
        groceries.add("Humus");
        groceries.add("Falaffel");
        groceries.add("Cheese");
        groceries.add("Bread");
        groceries.add("Shawarma");

        return groceries;
    }

    /**
     * Sets are unordered
     * sets dont allow duplicates
     *
     * @return
     */
    public Set<Integer> setDemo() {
        Set<Integer> marks = new HashSet<>();

        marks.add(0);
        marks.add(10);
        marks.add(20);
        marks.add(30);
        marks.add(40);
        marks.add(50);
        marks.add(60);
        marks.add(60); // will not be inserted into the set

        return marks;
    }

    /**
     * no duplicate keys, values will be overridden
     * order not guaranteed
     *
     * @return
     */
    public Map<String, Integer> mapDemo() {

        // ratings out of 10
        Map<String, Integer> restaurantRatings = new HashMap<>();

        restaurantRatings.put("KFC", 2);
        restaurantRatings.put("KFC", null); // no duplicates
        restaurantRatings.put("Mc Donalds", 8);
        restaurantRatings.put("Five Guys", 9);
        restaurantRatings.put("Subway", 10);
        restaurantRatings.put("In and Out", 10);
        restaurantRatings.put("Grill Mark", null);
        restaurantRatings.put(null, 5);
        restaurantRatings.put(null, 7);
        restaurantRatings.put(null, 9);

        return restaurantRatings;
    }

    public String consoleReaderNewWay() {
        // newer way of reading from the console
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        System.out.println("you entered => " + userInput);

        int weight = scanner.nextInt();
        System.out.println("your weight => " + weight);

//        System.out.println(scanner);
        scanner.close();
//        System.out.println(scanner);

        return userInput;
    }

    public void consoleReaderOldWay() {

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        try {
            String userInput = bufferedReader.readLine();
            System.out.println("you entered => " + userInput);
        } catch (IOException ioException) {
            System.out.println(ioException.getMessage());
        }
    }

    public void fileReader() {

        File file = new File("schedule.txt"); // relative path to the root of the project is where the file is

        // change the absolute path to suiot your compuyter and OS
        File file2 = new File("/home/jason/Desktop/schedule.txt"); // absolute path to the file on the computer

        try (Scanner scanner = new Scanner(file)) {
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
            }
        } catch (IOException ioException) {
            System.out.println(ioException.getMessage());
        }
    }

    public void fileReader(String filename) {
        Path path = Paths.get(filename);

        try {
            BufferedReader reader = Files.newBufferedReader(Paths.get(filename));

            String line = reader.readLine();

            while (line != null) {
                System.out.println(line);

                line = reader.readLine();
            }

            reader.close();
        } catch (IOException ioException) {
            System.out.println(ioException.getMessage());
        } finally {
            System.out.println("Program finished"); // or some other useful bit of code - read up on why you should use this
        }

    }

    /**
     * https://www.w3schools.com/java/java_files_create.asp
     */
    public void createFile() {
        try {
            File myObj = new File("filename.txt");
            if (myObj.createNewFile()) {
                System.out.println("File created: " + myObj.getName());
            } else {
                System.out.println("File already exists.");
            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
}
